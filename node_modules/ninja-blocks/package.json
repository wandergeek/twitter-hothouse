{
  "name": "ninja-blocks",
  "version": "0.1.3",
  "description": "Library for interfacing with Ninja Blocks platform.",
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "request": "2.11.1"
  },
  "devDependencies": {
    "should": "*",
    "mocha": "*"
  },
  "author": {
    "name": "Daniel Friedman"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:ninjablocks/node-ninja-blocks.git"
  },
  "keywords": [
    "Ninja",
    "Blocks"
  ],
  "readme": "Node Ninja Blocks\n===\nA simple library to help interacting with the Ninja Blocks Platform.\n\n## Installation\n```\nnpm install ninja-blocks\n```\n\n## OAuth 2 Usage\n```javascript\nvar ninjaBlocks = require('ninja-blocks');\n// ACCESS_TOKEN acquired via OAuth\nvar ninja = ninjaBlocks.app({access_token:ACCESS_TOKEN});\n\nninja.devices(function(err,devices) {\n  // ...\n});\n```\n\n## User Access Token Usage\n```javascript\nvar ninjaBlocks = require('ninja-blocks');\n// USER_ACCESS_TOKEN acquired via settings page in Ninja Cloud\nvar ninja = ninjaBlocks.app({user_access_token:USER_ACCESS_TOKEN});\n\nninja.devices(function(err,devices) {\n  // ...\n});\n```\n\n## API Overview\n\n### User\n```javascript\n// Fetch a user's profile anyformation\nninja.user(function(err, data) { ... }); \n\n// Fetch a user's activity stream\nninja.user().stream(function(err,data){ ... }) \n\n// Fetch a user's pusher channel\nninja.user().pusher_channel(function(err,data){ ... }) \n```\n\n### Device\n```javascript\n/**\n * Fetch all the user's device details.\n * Optionally if an object is passed as the first argument,\n * it will filter by the parameters. If a string is provided, \n * it will assume it's the device type intended for filtering. \n *\n * NOTE: The returned data is in the form guid => meta data\n * You will need the guid for all the other device commands.    \n */\nninja.devices(function(err, data) { ... });\nninja.devices({ device_type:'rgb_led' },function(err,data){ ... })\nninja.devices({ vid:0, shortName:'On Board RGB LED' },function(err,data){ ... })\n\n// Fetch one device's details\nninja.device(guid).fetch(function(err,data) { ... });\n\n// Send `command` to device `guid`\nninja.device(guid).actuate(command,function(err) { ... }) \n\n// Subscribe to a device's data feed. Ninja Blocks will POST the requested\n// device's data to the `url` provided here.\n// Optionally `overwrite`s an existing callback `url`\nninja.device(guid).subscribe(url,overwrite,function(err) { ... }) \n\n// Unubscribe from a device's data feed.\nninja.device(guid).unsubscribe(function(err) { ... }) \n\n// Fetch any historical data about this device. Optionally specify the period's `start` and `end` timestamp.\nninja.device(guid).data(start, end, function(err, data) { ... })\n\n// Fetch the last heartbeat received by this device.\nninja.device(guid).last_heartbeat(function(err, data) { ... })\n```\n\n### Helpers\n```javascript\n// Returns found subdevices within a set of devices\nninja.utils.findSubDevice({ shortName: 'Lamp On' }, deviceSet);\n```\nThis is by no means exhaustive, and more functionality will be forthcoming.\n\n\n## Example\n```javascript\n\nvar _ = require('underscore');\nvar ninjaBlocks = require('ninja-blocks');\n// Use the API Access Token from https://a.ninja.is/hacking\nvar ninja = ninjaBlocks.app({user_access_token:USER_ACCESS_TOKEN});\n\n\n// Get the most recent temperature reading from all temperature sensors\nninja.devices({ device_type: 'temperature' }, function(err, devices) {\n    _.each(devices, function(device,guid){\n        ninja.device(guid).last_heartbeat(function(err, data) { \n            console.log(device.shortName+' is '+data.DA+'C');\n        })\n    })\n});\n\n// Execute an RF command by name - turn a \"Lamp Off\" \nninja.devices({ device_type: 'rf433' }, function(err, devices) {\n    var lamps = ninja.utils.findSubDevice({ shortName: 'Lamp Off' }, devices);\n    _.each(lamps, function(lamp){\n        ninja.device(lamp.guid).actuate(lamp.data) \n    })\n});\n",
  "readmeFilename": "README.md",
  "_id": "ninja-blocks@0.1.3",
  "dist": {
    "shasum": "fb9ac51c6be01036d10b9f2a6854d3567c01c62b"
  },
  "_from": "ninja-blocks@",
  "_resolved": "https://registry.npmjs.org/ninja-blocks/-/ninja-blocks-0.1.3.tgz"
}
